nexus:
  docker:
    enabled: true
    registries:
      - host: registry.hosted
        port: 5000
      - host: registry.dockerhub.proxy
        port: 5001
      - host: registry.elastic.proxy
        port: 5002
  env:
    - name: install4jAddVmParams
      value: "-Xms1200M -Xmx1200M -XX:MaxDirectMemorySize=4G -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
    - name: NEXUS_SECURITY_RANDOMPASSWORD
      value: "true"
ingress:
  enabled: true
  annotations: {kubernetes.io/ingress.class: nginx,nginx.ingress.kubernetes.io/proxy-body-size: "0"}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hostPath: /
  hostRepo: nexus.catalyst.com
  tls: []
    # - secretName: nexus-local-tls
    #   hosts:
    #     - nexus.local
    #     - nexus-docker.local
  #     - nexus-docker-hosted.local

config:
  enabled: true
  mountPath: /sonatype-nexus-conf
  data:
    postStart.sh: |
      #!/usr/bin/env bash
      HOST=nexus-artifactory-nexus-repository-manager:8081


      # default user setup by Nexus. In the end of this script I will remove all roles from this account
      USERNAME=admin
      PASSWORD=`cat /nexus-data/admin.password`
      echo $PASSWORD

      echo `pwd`

      REPOS=($(ls | grep json | sed -e 's/\..*$//'))

      until $(curl --output /dev/null --silent --head --fail http://$HOST/); do
        echo $?
        printf '.'
        sleep 5
      done

      if [ ${#REPOS[@]} -lt 1 ]
      then
        echo "Not enough JSON files!"
        exit 1
      fi
      printf '.........................................................................................................................'
      printf 'starting curl command'

      curl -X POST "http://nexus-artifactory-nexus-repository-manager:8081/service/rest/beta/repositories/helm/hosted" \
          --user "admin:$PASSWORD" \
          -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -d "{ \"name\": \"service-starter-helm-hosted\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true, \"writePolicy\": \"allow\" }, \"cleanupPolicy\": \"weekly-cleanup\" }"

      printf 'ending curl command'
      printf '.........................................................................................................................'

      for i in "${REPOS[@]}"
      do
        echo "creating $i repository"
        STATUSCODE=$(curl --output /dev/stderr --silent -v -u $USERNAME:$PASSWORD --header "Content-Type: application/json" --write-out "%{http_code}" "http://$HOST/service/rest/v1/script/" -d @$i.json)
        if [ $STATUSCODE -lt 200 ] || [ $STATUSCODE -gt 299 ]
        then
            echo "Could not upload $i"
            exit 1
        fi

        STATUSCODE=$(curl --output /dev/stderr --silent -v -X POST -u $USERNAME:$PASSWORD --header "Content-Type: text/plain" --write-out "%{http_code}" "http://$HOST/service/rest/v1/script/$i/run")
        if [ $STATUSCODE -lt 200 ] || [ $STATUSCODE -gt 299 ]
        then
            echo "Could not execute $i"
            exit 1
        fi
      done

      exit $?


    rutauth.json: |
      {
        "name": "rutauth",
        "type": "groovy",
        "content": "import groovy.json.JsonOutput; import org.sonatype.nexus.capability.CapabilityReference; import org.sonatype.nexus.capability.CapabilityType;  import org.sonatype.nexus.internal.capability.DefaultCapabilityReference;import org.sonatype.nexus.internal.capability.DefaultCapabilityRegistry; def capabilityRegistry = container.lookup(DefaultCapabilityRegistry.class.getName()); def capabilityType = CapabilityType.capabilityType('rutauth'); def capabilityProps = ['httpHeader': 'X-AUTH-STAKATER']; def capabilityNotes = 'configured through scripting api'; DefaultCapabilityReference existing = capabilityRegistry.all.find { CapabilityReference capabilityReference -> capabilityReference.context().descriptor().type() == capabilityType }; if (!existing) { capabilityRegistry.add(capabilityType, true, capabilityNotes, capabilityProps).toString(); JsonOutput.toJson([result : 'Successfully added Rut Auth!']) }"
      }
    docker-bearer-token-realm.json: |
      {
        "name": "docker-bearer-token-realm",
        "type": "groovy",
        "content": "import org.sonatype.nexus.security.realm.RealmManager; def realmManager = container.lookup(RealmManager.class.name); realmManager.enableRealm('DockerToken')"
      }
    service-starter-docker-hosted.json: |
      {
        "name": "service-starter-docker-hosted",
        "type": "groovy",
        "content": "import org.sonatype.nexus.repository.config.WritePolicy; repository.createDockerHosted('service-starter-docker-hosted', 5000, null, 'default', true, false , WritePolicy.ALLOW, false)"
      }
    service-starter-docker-hub-proxy.json: |
      {
        "name": "service-starter-docker-hub-proxy",
        "type": "groovy",
        "content": "repository.createDockerProxy('service-starter-docker-hub-proxy', 'https://registry-1.docker.io', 'HUB', null,5001, null, 'default', true, false ,false)"
      }
    service-starter-docker-elastic-proxy.json: |
      {
        "name": "service-starter-docker-elastic-proxy",
        "type": "groovy",
        "content": "repository.createDockerProxy('service-starter-docker-elastic-proxy', 'https://docker.elastic.co/', 'REGISTRY', null,5002, null, 'default', true, false ,false)"
      }
    anonymous.json: |
      {
        "name": "anonymous",
        "type": "groovy",
        "content": "security.setAnonymousAccess(true)"
      }
